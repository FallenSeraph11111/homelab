version: "3.7"
services:
  agent:
    image: portainer/agent:2.19.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [ node.platform.os == linux ]
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
  portainer:
    image: portainer/portainer-ce:2.19.0
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    depends_on:
      - nginx-proxy-manager
    ##ports:
    #  - "9443:9443"
    #  - "9000:9000"
    #  - "8000:8000"
    volumes:
      - portainer_data:/data
    networks:
      - agent_network
      - nginx
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [ node.role == manager ]
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  speedtest-tracker:
    image: henrywhitaker3/speedtest-tracker:dev-arm
    container_name: speedtest-tracker
    restart: unless-stopped
    hostname: speedtest-tracker #optional
    depends_on:
      - nginx-proxy-manager
    networks:
      - nginx
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - OOKLA_EULA_GDPR=true
    volumes:
      - /portainer/Files/AppData/Config/speedtest-tracker:/config
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: dnsrr
  syncthing:
    image: lscr.io/linuxserver/syncthing:latest
    container_name: syncthing
    restart: unless-stopped
    hostname: syncthing #optional
    depends_on:
      - nginx-proxy-manager
    networks:
      - nginx
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - /portainer/Files/AppData/Config:/config
      - /sync:/var/syncthing
    deploy:
      mode: global
      endpoint_mode: dnsrr
    #ports:
      #- 22000:22000/tcp
      #- 22000:22000/udp
      #- 21027:21027/udp

  home-assistant:
    container_name: homeassistant
    privileged: true
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
    volumes:
      - /portainer/Files/AppData/Config/homeassistant:/config
    network_mode: host
    image: 'ghcr.io/home-assistant/home-assistant:stable'

  esphome:
    hostname: esphome
    container_name: esphome
    image: esphome/esphome
    environment:
      - TZ=Europe/Berlin
    volumes:
      - /portainer/Files/AppData/Config/esphome:/config
#      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    privileged: true
    networks:
      - nginx

  mdns-repeater:
    image: monstrenyatko/mdns-repeater
    container_name: mdns-repeater
    restart: unless-stopped
    command: mdns-repeater-app -f ${MDNS_INTERFACE} ${MDNS_ADAPTER} #eg mdns-repeater-app -f eth0 br-abcdefghijk
    network_mode: "host"

  pihole:
    container_name: pihole
    image: cbcrowe/pihole-unbound:latest
    depends_on:
      - nginx-proxy-manager
    networks:
      - nginx
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      #- "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
    environment:
      TZ: 'Europe/Berlin'
    volumes:
      - /portainer/Files/AppData/Config/PiHole-Unbound/DNS:/etc/dnsmasq.d'
      - /portainer/Files/AppData/Config/PiHole-Unbound:/etc/pihole
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: unless-stopped

  calibre-web:
    image: ghcr.io/linuxserver/calibre-web
    container_name: calibre-web
    depends_on:
      - nginx-proxy-manager
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
      - DOCKER_MODS=linuxserver/calibre-web:calibre
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - HOME=/root
      - S6_STAGE2_HOOK=/docker-mods
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1
      - TERM=xterm
    volumes:
      - /sync/calibre:/book
      - /portainer/Files/AppData/Config/calibreweb:/config
    restart: unless-stopped
    networks:
      - nginx
    ports:
      - "8083:8083"
#  samba:
#    image: dperson/samba:latest
#    container_name: samba
#    environment:
#      - PUID=1000
#      - PGID=1000
#      - USERID=1000
#      - GROUPID=1000
#      - PERMISSIONS=true
#      - TZ:Europe/Berlin
#    stdin_open: true
#    tty: true
#    tmpfs:
#      - /tmp
#    volumes:
#      - /sync:/share
#    ports:
#      - "137:137/udp"
#      - "138:138/udp"
#      - "139:139/tcp"
#      - "445:445/tcp"
#    restart: unless-stopped
#    command: "-s 'sync;/share;yes;no;yes;svollmer' -u ${SAMBA_USER} -p"

  cloudflare-ddns:
    hostname: ddns
    environment:
      - API_KEY=${DDNS_API_KEY}
      - ZONE=fallenlab.com
      - SUBDOMAIN=ddns
      - DELETE_ON_STOP=true
      - RRTYPE=A
    image: oznu/cloudflare-ddns
    restart: unless-stopped
    networks:
      - nginx

  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    hostname: heimdall #optional
    depends_on:
      - nginx-proxy-manager
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - /portainer/Files/AppData/Config/Heimdall:/config
    restart: unless-stopped
    networks:
      - nginx

  jellyfin:
    container_name: jellyfin
    hostname: jellyfin
    image: linuxserver/jellyfin:latest
    depends_on:
      - nginx-proxy-manager
    networks:
      - nginx
    #ports:
    #- "8096:8096/tcp"
    #- "8920:8920/udp"
    environment:
      - TZ=Europe/Berlin
      - HOME=/root
      - PGID=1000
      - PUID=1000
      - S6_CMD_WAIT_FOR_SERVICES_MAXTIME=0
      - S6_STAGE2_HOOK=/docker-mods
      - S6_VERBOSITY=1
      - VIRTUAL_ENV=/lsiopy
      - TERM=xterm
    volumes:
      - /portainer/Files/AppData/Config/Jellyfin:/config
      - /sync/asmr:/data/asmr
      - /sync/Movies:/data/movies
      - /sync/music:/data/music
      - /sync/TV:/data/tvshows
      - /sync/youtube:/data/youtube
      - /sync/music_video:/data/music_video
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: unless-stopped

  nginx-proxy-manager:
    container_name: nginx-proxy-manager
    image: 'jc21/nginx-proxy-manager:latest'
    networks:
     - nginx
    restart: unless-stopped
    ports:
      # These ports are in format <host-port>:<container-port>
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP

      # Uncomment the next line if you uncomment anything in the section
    environment:
      # Uncomment this if you want to change the location of
      # the SQLite DB file within the container
      DB_SQLITE_FILE: "/data/database.sqlite"

    # Uncomment this if IPv6 is not enabled on your host
    #  DISABLE_IPV6: 'false'

    volumes:
      - /portainer/Files/AppData/Config/nginx-proxy-manager/data:/data
      - /portainer/Files/AppData/Config/nginx-proxy-manager/letsencrypt:/etc/letsencrypt
      - /portainer/Files/AppData/Config/nginx-proxy-manager/config:/config/nginx/proxy-confs


  transmission:
    container_name: transmission-openvpn-latest
    hostname: transmission-openvpn-latest
    networks:
      - nginx
    image: haugene/transmission-openvpn:latest
    restart: unless-stopped
    environment:
      PUID: 1000
      PGID: 1000
      OPENVPN_PROVIDER: custom
      OPENVPN_CONFIG: default
      OPENVPN_USERNAME: ${OPENVPN_USERNAME}
      OPENVPN_PASSWORD: ${OPENVPN_PASSWORD}
      #LOCAL_NETWORK: 192.168.0.0/16
      TRANSMISSION_WATCH_DIR_ENABLED: true
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      OPENVPN_OPTS:
      GLOBAL_APPLY_PERMISSIONS: true
      TRANSMISSION_RPC_PORT: 9091
      TRANSMISSION_RPC_USERNAME:
      TRANSMISSION_RPC_PASSWORD:
      TRANSMISSION_DOWNLOAD_DIR: /data/completed
      TRANSMISSION_INCOMPLETE_DIR: /data/incomplete
      TRANSMISSION_WATCH_DIR: /data/watch
      CREATE_TUN_DEVICE: true
      ENABLE_UFW: false
      UFW_ALLOW_GW_NET: false
      UFW_EXTRA_PORTS:
      UFW_DISABLE_IPTABLES_REJECT: false
      PEER_DNS: true
      PEER_DNS_PIN_ROUTES: true
      DROP_DEFAULT_ROUTE:
      WEBPROXY_ENABLED: false
      #WEBPROXY_PORT: 8118
      #WEBPROXY_USERNAME:
      #WEBPROXY_PASSWORD:
      LOG_TO_STDOUT: false
      HEALTH_CHECK_HOST: google.com
      SELFHEAL: true
      REVISION: 1103172c3288b7de681e2fb7f1378314f17f66cf
    command: "'dumb-init' '/etc/openvpn/start.sh'"
    volumes:
      - /portainer/Files/AppData/Config/transmission-openvpn:/config
      - /portainer/Downloads:/data
      - /etc/localtime:/etc/localtime
      - /var/vpn/protonvpn:/etc/openvpn/custom

  bazarr:
    depends_on:
      - transmission
    container_name: bazarr
    hostname: bazarr
    networks:
      - nginx
    image: linuxserver/bazarr:latest
    restart: unless-stopped
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/Berlin
      PATH: /lsiopy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      PS1: $(whoami)@$(hostname):$(pwd)\$
      HOME: /root
      TERM: xterm
      S6_CMD_WAIT_FOR_SERVICES_MAXTIME: 0
      S6_VERBOSITY: 1
      S6_STAGE2_HOOK: /docker-mods
      VIRTUAL_ENV: /lsiopy
      LSIO_FIRST_PARTY: true
    entrypoint: /init
    volumes:
      - /portainer/Files/AppData/Config/Bazarr:/config
      - /sync/Movies:/movies
      - /sync/TV:/tv

  radarr:
    depends_on:
      - transmission
    container_name: radarr
    hostname: radarr
    networks:
      - nginx
    image: linuxserver/radarr:latest
    restart: unless-stopped
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/Berlin
      PATH: /lsiopy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      PS1: $(whoami)@$(hostname):$(pwd)\$
      HOME: /root
      TERM: xterm
      S6_CMD_WAIT_FOR_SERVICES_MAXTIME: 0
      S6_VERBOSITY: 1
      S6_STAGE2_HOOK: /docker-mods
      VIRTUAL_ENV: /lsiopy
      LSIO_FIRST_PARTY: true
      XDG_CONFIG_HOME: /config/xdg
    entrypoint: /init
    volumes:
      - /portainer/Files/AppData/Config/Radarr:/config
      - /portainer/Downloads:/data
      - /portainer/Downloads:/downloads
      - /sync/Movies:/movies
      - /sync/TV:/tv

  jackett:
    container_name: jackett
    hostname: jackett
    networks:
      - nginx
    image: linuxserver/jackett:latest
    restart: unless-stopped
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/Berlin
      PATH: /lsiopy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      PS1: $(whoami)@$(hostname):$(pwd)\$
      HOME: /root
      TERM: xterm
      S6_CMD_WAIT_FOR_SERVICES_MAXTIME: 0
      S6_VERBOSITY: 1
      S6_STAGE2_HOOK: /docker-mods
      VIRTUAL_ENV: /lsiopy
      LSIO_FIRST_PARTY: true
      XDG_CONFIG_HOME: /config
      XDG_DATA_HOME: /config
    entrypoint: /init
    volumes:
      - /portainer/Files/AppData/Config/Jackett:/config
      - /portainer/Downloads:/data
      - /portainer/Downloads:/downloads

  sonarr:
    depends_on:
      - transmission
    container_name: sonarr
    hostname: sonarr
    networks:
      - nginx
    image: linuxserver/sonarr:latest
    restart: unless-stopped
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/Berlin
      PATH: /lsiopy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      PS1: $(whoami)@$(hostname):$(pwd)\$
      HOME: /root
      TERM: xterm
      S6_CMD_WAIT_FOR_SERVICES_MAXTIME: 0
      S6_VERBOSITY: 1
      S6_STAGE2_HOOK: /docker-mods
      VIRTUAL_ENV: /lsiopy
      LSIO_FIRST_PARTY: true
      XDG_CONFIG_HOME: /config/xdg
      SONARR_BRANCH: main
    entrypoint: /init
    volumes:
      - /portainer/Files/AppData/Config/Sonarr:/config
      - /portainer/Downloads:/data
      - /portainer/Downloads:/downloads
      - /sync/Movies:/movies
      - /sync/TV:/tv
      - /dev/rtc:/dev/rtc

#TODO set up postgres / other db
#TODO set up eclipse-mosquito so that it is also here like homeassistant
networks:
  nginx:
    name: nginx_network
    external: true
    enable_ipv6: true
    ipam:
      config:
        - subnet: fd12:3456:789a:1::/64

volumes:
  portainer_data:
    external: true